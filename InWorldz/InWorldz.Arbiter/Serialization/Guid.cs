// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.Arbiter.Serialization
{

using System;
using FlatBuffers;

public struct Guid : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Guid GetRootAsGuid(ByteBuffer _bb) { return GetRootAsGuid(_bb, new Guid()); }
  public static Guid GetRootAsGuid(ByteBuffer _bb, Guid obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Guid __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Bytes(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int BytesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBytesBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<Guid> CreateGuid(FlatBufferBuilder builder,
      VectorOffset bytesOffset = default(VectorOffset)) {
    builder.StartObject(1);
    Guid.AddBytes(builder, bytesOffset);
    return Guid.EndGuid(builder);
  }

  public static void StartGuid(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBytes(FlatBufferBuilder builder, VectorOffset bytesOffset) { builder.AddOffset(0, bytesOffset.Value, 0); }
  public static VectorOffset CreateBytesVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartBytesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Guid> EndGuid(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Guid>(o);
  }
};


}
