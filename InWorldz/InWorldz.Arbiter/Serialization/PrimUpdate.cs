// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.Arbiter.Serialization
{

using System;
using FlatBuffers;

public struct PrimUpdate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PrimUpdate GetRootAsPrimUpdate(ByteBuffer _bb) { return GetRootAsPrimUpdate(_bb, new PrimUpdate()); }
  public static PrimUpdate GetRootAsPrimUpdate(ByteBuffer _bb, PrimUpdate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PrimUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte SimId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int SimIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSimIdBytes() { return __p.__vector_as_arraysegment(4); }
  public uint LocalId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong NewHash { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public InWorldz.Arbiter.Serialization.Guid? UserIds(int j) { int o = __p.__offset(10); return o != 0 ? (InWorldz.Arbiter.Serialization.Guid?)(new InWorldz.Arbiter.Serialization.Guid()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UserIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PrimUpdate> CreatePrimUpdate(FlatBufferBuilder builder,
      VectorOffset simIdOffset = default(VectorOffset),
      uint localId = 0,
      ulong newHash = 0,
      VectorOffset userIdsOffset = default(VectorOffset)) {
    builder.StartObject(4);
    PrimUpdate.AddNewHash(builder, newHash);
    PrimUpdate.AddUserIds(builder, userIdsOffset);
    PrimUpdate.AddLocalId(builder, localId);
    PrimUpdate.AddSimId(builder, simIdOffset);
    return PrimUpdate.EndPrimUpdate(builder);
  }

  public static void StartPrimUpdate(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddSimId(FlatBufferBuilder builder, VectorOffset simIdOffset) { builder.AddOffset(0, simIdOffset.Value, 0); }
  public static VectorOffset CreateSimIdVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartSimIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddLocalId(FlatBufferBuilder builder, uint localId) { builder.AddUint(1, localId, 0); }
  public static void AddNewHash(FlatBufferBuilder builder, ulong newHash) { builder.AddUlong(2, newHash, 0); }
  public static void AddUserIds(FlatBufferBuilder builder, VectorOffset userIdsOffset) { builder.AddOffset(3, userIdsOffset.Value, 0); }
  public static VectorOffset CreateUserIdsVector(FlatBufferBuilder builder, Offset<InWorldz.Arbiter.Serialization.Guid>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUserIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PrimUpdate> EndPrimUpdate(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PrimUpdate>(o);
  }
  public static void FinishPrimUpdateBuffer(FlatBufferBuilder builder, Offset<PrimUpdate> offset) { builder.Finish(offset.Value); }
};


}
